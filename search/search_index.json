{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Convoke A decentralized app configuration toolkit that tries to do things right. Installation With Pip: pip install convoke Table of Contents Tutorials API Reference","title":"Convoke"},{"location":"#convoke","text":"A decentralized app configuration toolkit that tries to do things right.","title":"Convoke"},{"location":"#installation","text":"With Pip: pip install convoke","title":"Installation"},{"location":"#table-of-contents","text":"Tutorials API Reference","title":"Table of Contents"},{"location":"reference/","text":"API Reference convoke.configs : application configuration tools convoke.bases : decentralized apps convoke.signals : async inter-base messages convoke.mountpoints : a simple plugin system for bases","title":"API Reference"},{"location":"reference/#api-reference","text":"convoke.configs : application configuration tools convoke.bases : decentralized apps convoke.signals : async inter-base messages convoke.mountpoints : a simple plugin system for bases","title":"API Reference"},{"location":"reference/bases/","text":"convoke.bases Decentralized module dependency declaration and initialization Bases provide a similar concept to Django's AppConfig, and act as a central place for each module to register important things like signal handlers and template context processors, without needing a global central object. A single HQ acts as the coordinator for a suite of Bases. At runtime, an application instantiates an HQ, providing a list of dependencies (dotted strings, similar to Django's INSTALLED_APPS setting). Each dependency is a dotted string to a module or package containing a Base subclass named Main . Bases may also declare their own dependencies. This system allows us to avoid module-level code dependencies that depend overly on import order and global state, and allows a better separation of initialization and execution. convoke.bases.HQ The HQ is the special root Base. The HQ is directly instantiated by a client code entrypoint, rather than discovered by the dependency loader. hq = HQ(config=MyConfig(), dependencies=['foo']) Source code in src/convoke/bases.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @dataclass class HQ : \"\"\"The HQ is the special root Base. The HQ is directly instantiated by a client code entrypoint, rather than discovered by the dependency loader. hq = HQ(config=MyConfig(), dependencies=['foo']) \"\"\" config : BaseConfig = field ( default_factory = BaseConfig , repr = False ) bases : dict [ str , Base ] = field ( init = False , default_factory = dict , repr = False ) signal_receivers : dict [ Type [ Signal ], set [ Receiver ]] = field ( init = False , default_factory = lambda : defaultdict ( set )) mountpoints : MountpointDict [ Type [ Mountpoint ], Mountpoint ] = field ( init = False , default_factory = MountpointDict ) hq : HQ = field ( init = False ) current_instance : ClassVar [ ContextVar ] = ContextVar ( \"current_instance\" ) def __post_init__ ( self ): self . hq = self self . current_instance . set ( self ) @classmethod def get_current ( cls ): \"\"\"Return the instance of HQ for the current context.\"\"\" return cls . current_instance . get () def reset ( self ): \"\"\"Reset this HQ and its associated Bases. Primarily, this re-establishes this instance as the current HQ instance, and re-initializes bases. \"\"\" self . current_instance . set ( self ) for base in self . bases . values (): base . reset () def load_dependencies ( self , dependencies : Sequence [ str ]): \"\"\"Load peripheral Base dependencies. :param Sequence[str] dependencies: a list of dotted paths to modules/packages that contain a Base subclass named `Main`. \"\"\" load_dependencies ( self , dependencies ) for base in self . bases . values (): base . ready () logging . debug ( f \" { base . __module__ } reports ready\" ) def connect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Connect a receiver function to the given Signal subclass. All connections are local to this HQ instance. Mostly used internally via the `Base.responds(SignalSubclass)` decorator. :param Type[Signal] signal_class: The Signal subclass to connect to. :param Receiver receiver: a Callable that accepts a message of the type defined on the Signal subclass. \"\"\" self . signal_receivers [ signal_class ] . add ( receiver ) def disconnect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Disconnect a receiver function previously connected to the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to disconnect from. :param Receiver receiver: a previously-connected Callable. \"\"\" self . signal_receivers [ signal_class ] . discard ( receiver ) async def send_signal ( self , signal_class : Type [ Signal ], msg ): \"\"\"Send a Message to all receivers of the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to send :param Any msg: An instance of signal_class.Message \"\"\" for receiver in self . signal_receivers [ signal_class ]: try : if is_async_callable ( receiver ): await receiver ( msg ) else : receiver ( msg ) except Exception : # pragma: nocover # It's important that we swallow the exception, log # it, and soldier on. We don't need to cover this # branch though. logging . exception ( f \"Exception occurred while sending { signal_class !r} : \\n Receiver { receiver !r} \\n Message: { msg !r} \" ) connect_signal_receiver ( signal_class , receiver ) Connect a receiver function to the given Signal subclass. All connections are local to this HQ instance. Mostly used internally via the Base.responds(SignalSubclass) decorator. Parameters: Name Type Description Default signal_class Type[Signal] The Signal subclass to connect to. required receiver Receiver a Callable that accepts a message of the type defined on the Signal subclass. required Source code in src/convoke/bases.py 90 91 92 93 94 95 96 97 98 99 100 101 def connect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Connect a receiver function to the given Signal subclass. All connections are local to this HQ instance. Mostly used internally via the `Base.responds(SignalSubclass)` decorator. :param Type[Signal] signal_class: The Signal subclass to connect to. :param Receiver receiver: a Callable that accepts a message of the type defined on the Signal subclass. \"\"\" self . signal_receivers [ signal_class ] . add ( receiver ) disconnect_signal_receiver ( signal_class , receiver ) Disconnect a receiver function previously connected to the given Signal subclass. Parameters: Name Type Description Default signal_class Type[Signal] The Signal subclass to disconnect from. required receiver Receiver a previously-connected Callable. required Source code in src/convoke/bases.py 103 104 105 106 107 108 109 def disconnect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Disconnect a receiver function previously connected to the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to disconnect from. :param Receiver receiver: a previously-connected Callable. \"\"\" self . signal_receivers [ signal_class ] . discard ( receiver ) get_current () classmethod Return the instance of HQ for the current context. Source code in src/convoke/bases.py 63 64 65 66 @classmethod def get_current ( cls ): \"\"\"Return the instance of HQ for the current context.\"\"\" return cls . current_instance . get () load_dependencies ( dependencies ) Load peripheral Base dependencies. Parameters: Name Type Description Default dependencies Sequence[str] a list of dotted paths to modules/packages that contain a Base subclass named Main . required Source code in src/convoke/bases.py 79 80 81 82 83 84 85 86 87 88 def load_dependencies ( self , dependencies : Sequence [ str ]): \"\"\"Load peripheral Base dependencies. :param Sequence[str] dependencies: a list of dotted paths to modules/packages that contain a Base subclass named `Main`. \"\"\" load_dependencies ( self , dependencies ) for base in self . bases . values (): base . ready () logging . debug ( f \" { base . __module__ } reports ready\" ) reset () Reset this HQ and its associated Bases. Primarily, this re-establishes this instance as the current HQ instance, and re-initializes bases. Source code in src/convoke/bases.py 68 69 70 71 72 73 74 75 76 77 def reset ( self ): \"\"\"Reset this HQ and its associated Bases. Primarily, this re-establishes this instance as the current HQ instance, and re-initializes bases. \"\"\" self . current_instance . set ( self ) for base in self . bases . values (): base . reset () send_signal ( signal_class , msg ) async Send a Message to all receivers of the given Signal subclass. Parameters: Name Type Description Default signal_class Type[Signal] The Signal subclass to send required msg Any An instance of signal_class.Message required Source code in src/convoke/bases.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 async def send_signal ( self , signal_class : Type [ Signal ], msg ): \"\"\"Send a Message to all receivers of the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to send :param Any msg: An instance of signal_class.Message \"\"\" for receiver in self . signal_receivers [ signal_class ]: try : if is_async_callable ( receiver ): await receiver ( msg ) else : receiver ( msg ) except Exception : # pragma: nocover # It's important that we swallow the exception, log # it, and soldier on. We don't need to cover this # branch though. logging . exception ( f \"Exception occurred while sending { signal_class !r} : \\n Receiver { receiver !r} \\n Message: { msg !r} \" ) convoke.bases.Base A Base organizes an app within a Convoke project. For base discovery, an app should provide a subclass named Main in the app's primary module: class Main(Base): config_class: MyConfig = MyConfig # Dependencies are dotted paths to modules containing a # Main subclass: dependencies = ['foo', 'foo.bar'] Base is similar in concept to Django's AppConfig . Source code in src/convoke/bases.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 class Base ( metaclass = BaseMeta ): \"\"\"A Base organizes an app within a Convoke project. For base discovery, an app should provide a subclass named `Main` in the app's primary module: class Main(Base): config_class: MyConfig = MyConfig # Dependencies are dotted paths to modules containing a # Main subclass: dependencies = ['foo', 'foo.bar'] Base is similar in concept to Django's `AppConfig`. \"\"\" hq : HQ bases : dict [ str , Base ] = field ( init = False , default_factory = dict , repr = False ) config : BaseConfig = field ( init = False , repr = False ) dependencies : ClassVar [ Sequence [ str ]] = () config_class : ClassVar [ Type [ BaseConfig ]] = BaseConfig current_instance : ClassVar [ ContextVar ] def __init_subclass__ ( cls ): cls . current_instance = ContextVar ( \"current_instance\" ) def __post_init__ ( self ): self . reset () def ready ( self ): \"\"\"Make the base ready for action.\"\"\" self . on_ready () field = field responds = responds def reset ( self ): \"\"\"Reset the base, reloading configuration and initialization.\"\"\" self . config = self . config_class . from_config ( self . hq . config ) self . on_init () self . _register_special_methods () self . current_instance . set ( self ) def on_init ( self ): \"\"\"Subclass-overridable method to call at the end of initialization\"\"\" pass def on_ready ( self ): \"\"\"Subclass-overridable method to call after all Bases ready\"\"\" pass @classmethod def get_current ( cls ): \"\"\"Return the current instance of this Base for the current context.\"\"\" return cls . current_instance . get () def _register_special_methods ( self ): \"\"\"Look for and register specially-decorated Base methods.\"\"\" # We need to inspect members of the class, not the instance, # to avoid tripping over any descriptors before we're ready. for name , func in inspect . getmembers ( self . __class__ , inspect . isfunction ): if inspect . ismethod ( method := getattr ( self , name )): # Register signals signals = getattr ( func , \"__signals__\" , ()) for signal in signals : self . hq . connect_signal_receiver ( signal , method ) # Register mountpoints mountpoints = getattr ( method . __func__ , \"__mountpoints__\" , ()) for mountpoint in mountpoints : self . hq . mountpoints [ mountpoint ] . mount ( method ) else : # pragma: nocover pass get_current () classmethod Return the current instance of this Base for the current context. Source code in src/convoke/bases.py 233 234 235 236 @classmethod def get_current ( cls ): \"\"\"Return the current instance of this Base for the current context.\"\"\" return cls . current_instance . get () on_init () Subclass-overridable method to call at the end of initialization Source code in src/convoke/bases.py 225 226 227 def on_init ( self ): \"\"\"Subclass-overridable method to call at the end of initialization\"\"\" pass on_ready () Subclass-overridable method to call after all Bases ready Source code in src/convoke/bases.py 229 230 231 def on_ready ( self ): \"\"\"Subclass-overridable method to call after all Bases ready\"\"\" pass ready () Make the base ready for action. Source code in src/convoke/bases.py 211 212 213 def ready ( self ): \"\"\"Make the base ready for action.\"\"\" self . on_ready () reset () Reset the base, reloading configuration and initialization. Source code in src/convoke/bases.py 218 219 220 221 222 223 def reset ( self ): \"\"\"Reset the base, reloading configuration and initialization.\"\"\" self . config = self . config_class . from_config ( self . hq . config ) self . on_init () self . _register_special_methods () self . current_instance . set ( self )","title":"convoke.bases"},{"location":"reference/bases/#convokebases","text":"Decentralized module dependency declaration and initialization Bases provide a similar concept to Django's AppConfig, and act as a central place for each module to register important things like signal handlers and template context processors, without needing a global central object. A single HQ acts as the coordinator for a suite of Bases. At runtime, an application instantiates an HQ, providing a list of dependencies (dotted strings, similar to Django's INSTALLED_APPS setting). Each dependency is a dotted string to a module or package containing a Base subclass named Main . Bases may also declare their own dependencies. This system allows us to avoid module-level code dependencies that depend overly on import order and global state, and allows a better separation of initialization and execution.","title":"convoke.bases"},{"location":"reference/bases/#convokebaseshq","text":"The HQ is the special root Base. The HQ is directly instantiated by a client code entrypoint, rather than discovered by the dependency loader. hq = HQ(config=MyConfig(), dependencies=['foo']) Source code in src/convoke/bases.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @dataclass class HQ : \"\"\"The HQ is the special root Base. The HQ is directly instantiated by a client code entrypoint, rather than discovered by the dependency loader. hq = HQ(config=MyConfig(), dependencies=['foo']) \"\"\" config : BaseConfig = field ( default_factory = BaseConfig , repr = False ) bases : dict [ str , Base ] = field ( init = False , default_factory = dict , repr = False ) signal_receivers : dict [ Type [ Signal ], set [ Receiver ]] = field ( init = False , default_factory = lambda : defaultdict ( set )) mountpoints : MountpointDict [ Type [ Mountpoint ], Mountpoint ] = field ( init = False , default_factory = MountpointDict ) hq : HQ = field ( init = False ) current_instance : ClassVar [ ContextVar ] = ContextVar ( \"current_instance\" ) def __post_init__ ( self ): self . hq = self self . current_instance . set ( self ) @classmethod def get_current ( cls ): \"\"\"Return the instance of HQ for the current context.\"\"\" return cls . current_instance . get () def reset ( self ): \"\"\"Reset this HQ and its associated Bases. Primarily, this re-establishes this instance as the current HQ instance, and re-initializes bases. \"\"\" self . current_instance . set ( self ) for base in self . bases . values (): base . reset () def load_dependencies ( self , dependencies : Sequence [ str ]): \"\"\"Load peripheral Base dependencies. :param Sequence[str] dependencies: a list of dotted paths to modules/packages that contain a Base subclass named `Main`. \"\"\" load_dependencies ( self , dependencies ) for base in self . bases . values (): base . ready () logging . debug ( f \" { base . __module__ } reports ready\" ) def connect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Connect a receiver function to the given Signal subclass. All connections are local to this HQ instance. Mostly used internally via the `Base.responds(SignalSubclass)` decorator. :param Type[Signal] signal_class: The Signal subclass to connect to. :param Receiver receiver: a Callable that accepts a message of the type defined on the Signal subclass. \"\"\" self . signal_receivers [ signal_class ] . add ( receiver ) def disconnect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Disconnect a receiver function previously connected to the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to disconnect from. :param Receiver receiver: a previously-connected Callable. \"\"\" self . signal_receivers [ signal_class ] . discard ( receiver ) async def send_signal ( self , signal_class : Type [ Signal ], msg ): \"\"\"Send a Message to all receivers of the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to send :param Any msg: An instance of signal_class.Message \"\"\" for receiver in self . signal_receivers [ signal_class ]: try : if is_async_callable ( receiver ): await receiver ( msg ) else : receiver ( msg ) except Exception : # pragma: nocover # It's important that we swallow the exception, log # it, and soldier on. We don't need to cover this # branch though. logging . exception ( f \"Exception occurred while sending { signal_class !r} : \\n Receiver { receiver !r} \\n Message: { msg !r} \" )","title":"convoke.bases.HQ"},{"location":"reference/bases/#convoke.bases.HQ.connect_signal_receiver","text":"Connect a receiver function to the given Signal subclass. All connections are local to this HQ instance. Mostly used internally via the Base.responds(SignalSubclass) decorator. Parameters: Name Type Description Default signal_class Type[Signal] The Signal subclass to connect to. required receiver Receiver a Callable that accepts a message of the type defined on the Signal subclass. required Source code in src/convoke/bases.py 90 91 92 93 94 95 96 97 98 99 100 101 def connect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Connect a receiver function to the given Signal subclass. All connections are local to this HQ instance. Mostly used internally via the `Base.responds(SignalSubclass)` decorator. :param Type[Signal] signal_class: The Signal subclass to connect to. :param Receiver receiver: a Callable that accepts a message of the type defined on the Signal subclass. \"\"\" self . signal_receivers [ signal_class ] . add ( receiver )","title":"connect_signal_receiver"},{"location":"reference/bases/#convoke.bases.HQ.disconnect_signal_receiver","text":"Disconnect a receiver function previously connected to the given Signal subclass. Parameters: Name Type Description Default signal_class Type[Signal] The Signal subclass to disconnect from. required receiver Receiver a previously-connected Callable. required Source code in src/convoke/bases.py 103 104 105 106 107 108 109 def disconnect_signal_receiver ( self , signal_class : Type [ Signal ], receiver : Receiver ): \"\"\"Disconnect a receiver function previously connected to the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to disconnect from. :param Receiver receiver: a previously-connected Callable. \"\"\" self . signal_receivers [ signal_class ] . discard ( receiver )","title":"disconnect_signal_receiver"},{"location":"reference/bases/#convoke.bases.HQ.get_current","text":"Return the instance of HQ for the current context. Source code in src/convoke/bases.py 63 64 65 66 @classmethod def get_current ( cls ): \"\"\"Return the instance of HQ for the current context.\"\"\" return cls . current_instance . get ()","title":"get_current"},{"location":"reference/bases/#convoke.bases.HQ.load_dependencies","text":"Load peripheral Base dependencies. Parameters: Name Type Description Default dependencies Sequence[str] a list of dotted paths to modules/packages that contain a Base subclass named Main . required Source code in src/convoke/bases.py 79 80 81 82 83 84 85 86 87 88 def load_dependencies ( self , dependencies : Sequence [ str ]): \"\"\"Load peripheral Base dependencies. :param Sequence[str] dependencies: a list of dotted paths to modules/packages that contain a Base subclass named `Main`. \"\"\" load_dependencies ( self , dependencies ) for base in self . bases . values (): base . ready () logging . debug ( f \" { base . __module__ } reports ready\" )","title":"load_dependencies"},{"location":"reference/bases/#convoke.bases.HQ.reset","text":"Reset this HQ and its associated Bases. Primarily, this re-establishes this instance as the current HQ instance, and re-initializes bases. Source code in src/convoke/bases.py 68 69 70 71 72 73 74 75 76 77 def reset ( self ): \"\"\"Reset this HQ and its associated Bases. Primarily, this re-establishes this instance as the current HQ instance, and re-initializes bases. \"\"\" self . current_instance . set ( self ) for base in self . bases . values (): base . reset ()","title":"reset"},{"location":"reference/bases/#convoke.bases.HQ.send_signal","text":"Send a Message to all receivers of the given Signal subclass. Parameters: Name Type Description Default signal_class Type[Signal] The Signal subclass to send required msg Any An instance of signal_class.Message required Source code in src/convoke/bases.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 async def send_signal ( self , signal_class : Type [ Signal ], msg ): \"\"\"Send a Message to all receivers of the given Signal subclass. :param Type[Signal] signal_class: The Signal subclass to send :param Any msg: An instance of signal_class.Message \"\"\" for receiver in self . signal_receivers [ signal_class ]: try : if is_async_callable ( receiver ): await receiver ( msg ) else : receiver ( msg ) except Exception : # pragma: nocover # It's important that we swallow the exception, log # it, and soldier on. We don't need to cover this # branch though. logging . exception ( f \"Exception occurred while sending { signal_class !r} : \\n Receiver { receiver !r} \\n Message: { msg !r} \" )","title":"send_signal"},{"location":"reference/bases/#convokebasesbase","text":"A Base organizes an app within a Convoke project. For base discovery, an app should provide a subclass named Main in the app's primary module: class Main(Base): config_class: MyConfig = MyConfig # Dependencies are dotted paths to modules containing a # Main subclass: dependencies = ['foo', 'foo.bar'] Base is similar in concept to Django's AppConfig . Source code in src/convoke/bases.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 class Base ( metaclass = BaseMeta ): \"\"\"A Base organizes an app within a Convoke project. For base discovery, an app should provide a subclass named `Main` in the app's primary module: class Main(Base): config_class: MyConfig = MyConfig # Dependencies are dotted paths to modules containing a # Main subclass: dependencies = ['foo', 'foo.bar'] Base is similar in concept to Django's `AppConfig`. \"\"\" hq : HQ bases : dict [ str , Base ] = field ( init = False , default_factory = dict , repr = False ) config : BaseConfig = field ( init = False , repr = False ) dependencies : ClassVar [ Sequence [ str ]] = () config_class : ClassVar [ Type [ BaseConfig ]] = BaseConfig current_instance : ClassVar [ ContextVar ] def __init_subclass__ ( cls ): cls . current_instance = ContextVar ( \"current_instance\" ) def __post_init__ ( self ): self . reset () def ready ( self ): \"\"\"Make the base ready for action.\"\"\" self . on_ready () field = field responds = responds def reset ( self ): \"\"\"Reset the base, reloading configuration and initialization.\"\"\" self . config = self . config_class . from_config ( self . hq . config ) self . on_init () self . _register_special_methods () self . current_instance . set ( self ) def on_init ( self ): \"\"\"Subclass-overridable method to call at the end of initialization\"\"\" pass def on_ready ( self ): \"\"\"Subclass-overridable method to call after all Bases ready\"\"\" pass @classmethod def get_current ( cls ): \"\"\"Return the current instance of this Base for the current context.\"\"\" return cls . current_instance . get () def _register_special_methods ( self ): \"\"\"Look for and register specially-decorated Base methods.\"\"\" # We need to inspect members of the class, not the instance, # to avoid tripping over any descriptors before we're ready. for name , func in inspect . getmembers ( self . __class__ , inspect . isfunction ): if inspect . ismethod ( method := getattr ( self , name )): # Register signals signals = getattr ( func , \"__signals__\" , ()) for signal in signals : self . hq . connect_signal_receiver ( signal , method ) # Register mountpoints mountpoints = getattr ( method . __func__ , \"__mountpoints__\" , ()) for mountpoint in mountpoints : self . hq . mountpoints [ mountpoint ] . mount ( method ) else : # pragma: nocover pass","title":"convoke.bases.Base"},{"location":"reference/bases/#convoke.bases.Base.get_current","text":"Return the current instance of this Base for the current context. Source code in src/convoke/bases.py 233 234 235 236 @classmethod def get_current ( cls ): \"\"\"Return the current instance of this Base for the current context.\"\"\" return cls . current_instance . get ()","title":"get_current"},{"location":"reference/bases/#convoke.bases.Base.on_init","text":"Subclass-overridable method to call at the end of initialization Source code in src/convoke/bases.py 225 226 227 def on_init ( self ): \"\"\"Subclass-overridable method to call at the end of initialization\"\"\" pass","title":"on_init"},{"location":"reference/bases/#convoke.bases.Base.on_ready","text":"Subclass-overridable method to call after all Bases ready Source code in src/convoke/bases.py 229 230 231 def on_ready ( self ): \"\"\"Subclass-overridable method to call after all Bases ready\"\"\" pass","title":"on_ready"},{"location":"reference/bases/#convoke.bases.Base.ready","text":"Make the base ready for action. Source code in src/convoke/bases.py 211 212 213 def ready ( self ): \"\"\"Make the base ready for action.\"\"\" self . on_ready ()","title":"ready"},{"location":"reference/bases/#convoke.bases.Base.reset","text":"Reset the base, reloading configuration and initialization. Source code in src/convoke/bases.py 218 219 220 221 222 223 def reset ( self ): \"\"\"Reset the base, reloading configuration and initialization.\"\"\" self . config = self . config_class . from_config ( self . hq . config ) self . on_init () self . _register_special_methods () self . current_instance . set ( self )","title":"reset"},{"location":"reference/configs/","text":"convoke.configs Tools for parsing configuration values from the environment convoke.configs.env_field Define a field that pulls config values from the environment. Fields with missing defaults will be assumed to be required, and if missing will produce an error. Parameters: Name Type Description Default default Any the default value to use, if any, of the expected type. If this is omitted, the field will be required. MISSING doc str a docstring describing the use of the configuration value, used in generating .env files '' Source code in src/convoke/configs.py 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def env_field ( * , default = dc . MISSING , init = True , repr = True , hash = None , compare = True , metadata = None , kw_only = dc . MISSING , doc = \"\" , ): \"\"\"Define a field that pulls config values from the environment. Fields with missing defaults will be assumed to be required, and if missing will produce an error. :param Any default: the default value to use, if any, of the expected type. If this is omitted, the field will be required. :param str doc: a docstring describing the use of the configuration value, used in generating .env files \"\"\" return ConfigField ( default , init , repr , hash , compare , metadata , kw_only , doc ) convoke.configs.Secret Bases: str A string value that should not be revealed in logs, tracebacks, etc. Source code in src/convoke/configs.py 25 26 27 28 29 30 class Secret ( str ): \"\"\"A string value that should not be revealed in logs, tracebacks, etc.\"\"\" def __repr__ ( self ) -> str : class_name = self . __class__ . __name__ return f \" { class_name } ('**********')\" convoke.configs.BaseConfig Base settings common to all configurations Source code in src/convoke/configs.pyclass BaseConfig ( metaclass = BaseConfigMeta ): \"\"\"Base settings common to all configurations\"\"\" DEBUG : bool = env_field ( default = False , doc = \"Development mode?\" ) TESTING : bool = env_field ( default = False , doc = \"Testing mode?\" ) env_field = env_field @classmethod def from_config ( cls : Type [ T ], config : \"BaseConfig\" ) -> T : \"\"\"Derive an instance of this config class from another configuration. This is really only useful if the passed configuration has overridden (non-environment-derived) values. \"\"\" valid_params = set ( inspect . signature ( cls ) . parameters ) kwargs = { k : v for k , v in dc . asdict ( config ) . items () if k in valid_params } return cls ( ** kwargs ) @classmethod def gather_settings ( cls ) -> dict : \"\"\"Gather settings from all loaded configurations.\"\"\" base = BaseConfig . report_settings () base_settings = set ( base [ \"settings\" ] . keys ()) all_settings = { f \" { BaseConfig . __module__ } . { BaseConfig . __name__ } \" : base } for config in cls . plugins_by_name . values (): settings = config . report_settings () all_settings [ f \" { config . __module__ } . { config . __name__ } \" ] = { \"doc\" : settings [ \"doc\" ], \"settings\" : omit ( settings [ \"settings\" ], base_settings ), } return all_settings @classmethod def report_settings ( cls ) -> dict : \"\"\"Prepare a datastructure reporting on this configuration class's settings.\"\"\" return { \"doc\" : format_object_docstring ( cls ), \"settings\" : { fd . name : { \"type\" : fd . type , \"default\" : ( UNDEFINED if ( default := getattr ( fd , \"__config_default__\" , dc . MISSING )) is dc . MISSING else default ), \"doc\" : getattr ( fd , \"__doc__\" , \"\" ), } for fd in dc . fields ( cls ) }, } def __getitem__ ( self , name : str ) -> str : if hasattr ( self , name ): return getattr ( self , name ) return os . environ [ name ] def get ( self , name : str , default : Any = UNDEFINED , caster : Union [ Type , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value, optionally casting it as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the string value to, if any. \"\"\" if caster is UNDEFINED : caster = identity else : caster = get_casting_type ( name , caster ) try : value = self [ name ] except KeyError : if default is UNDEFINED : raise else : value = default return caster ( value ) def asdict ( self , keys = ()) -> dict : \"\"\"Return a dictionary with the defined settings\"\"\" if keys : return fn . project ( dc . asdict ( self ), keys ) else : return dc . asdict ( self ) def get_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED , caster : Type = tuple [ str ] ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a sequence, optionally casting internal values as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the internal string values to, if any. \"\"\" return self . get ( name , default = default , caster = caster ) def as_secret ( self , name : str , default : Secret = UNDEFINED ) -> Secret : \"\"\"Return the named configuration environment value as a Secret string. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Secret. \"\"\" return self . get ( name , default = default , caster = Secret ) def as_secret_tuple ( self , name : str , default : Union [ tuple [ Secret ], TUndefined ] = UNDEFINED ) -> tuple [ Secret ]: \"\"\"Return the named configuration environment value as a sequence of Secret strings. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Secrets. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ Secret ]) def as_bool ( self , name : str , default : Union [ bool , TUndefined ] = UNDEFINED ) -> bool : \"\"\"Return the named configuration environment value as a boolean value. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a boolean. \"\"\" return self . get ( name , default = default , caster = bool ) def as_bool_tuple ( self , name : str , default : Union [ tuple [ bool ], TUndefined ] = UNDEFINED ) -> tuple [ bool ]: \"\"\"Return the named configuration environment value as a tuple of boolean values. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of booleans. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ bool ]) def as_int ( self , name : str , default : Union [ int , TUndefined ] = UNDEFINED ) -> int : \"\"\"Return the named configuration environment value as an int. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an int. \"\"\" return self . get ( name , default = default , caster = int ) def as_int_tuple ( self , name : str , default : Union [ tuple [ int ], TUndefined ] = UNDEFINED ) -> tuple [ int ]: \"\"\"Return the named configuration environment value as a tuple of ints. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of ints. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ int ]) def as_float ( self , name : str , default : Union [ float , TUndefined ] = UNDEFINED ) -> float : \"\"\"Return the named configuration environment value as a float. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a float. \"\"\" return self . get ( name , default = default , caster = float ) def as_float_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ float ]: \"\"\"Return the named configuration environment value as a tuple of floats. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of floats. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ float ]) def as_path ( self , name : str , default : Union [ Path , TUndefined ] = UNDEFINED ) -> Path : \"\"\"Return the named configuration environment value as a Path. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Path. \"\"\" return self . get ( name , default = default , caster = Path ) def as_path_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ Path ]: \"\"\"Return the named configuration environment value as a tuple of Paths. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Paths. \"\"\" return self . get ( name , default = default , caster = tuple [ Path ]) def as_package_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported module. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a module. \"\"\" path = self . get ( name , default = default ) return importlib . import_module ( path ) def as_package_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a tuple of imported modules. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of modules. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( importlib . import_module ( path ) for path in paths ) def as_object_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported object. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an object. \"\"\" path = self . get ( name , default = default ) return import_object ( path ) def as_object_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ): \"\"\"Return the named configuration environment value as a tuple of imported objects. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of objects. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( import_object ( path ) for path in paths ) as_bool ( name , default = UNDEFINED ) Return the named configuration environment value as a boolean value. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a boolean. UNDEFINED Source code in src/convoke/configs.py 361 362 363 364 365 366 367 def as_bool ( self , name : str , default : Union [ bool , TUndefined ] = UNDEFINED ) -> bool : \"\"\"Return the named configuration environment value as a boolean value. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a boolean. \"\"\" return self . get ( name , default = default , caster = bool ) as_bool_tuple ( name , default = UNDEFINED ) Return the named configuration environment value as a tuple of boolean values. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of booleans. UNDEFINED Source code in src/convoke/configs.py 369 370 371 372 373 374 375 def as_bool_tuple ( self , name : str , default : Union [ tuple [ bool ], TUndefined ] = UNDEFINED ) -> tuple [ bool ]: \"\"\"Return the named configuration environment value as a tuple of boolean values. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of booleans. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ bool ]) as_float ( name , default = UNDEFINED ) Return the named configuration environment value as a float. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a float. UNDEFINED Source code in src/convoke/configs.py 393 394 395 396 397 398 399 def as_float ( self , name : str , default : Union [ float , TUndefined ] = UNDEFINED ) -> float : \"\"\"Return the named configuration environment value as a float. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a float. \"\"\" return self . get ( name , default = default , caster = float ) as_float_tuple ( name , default = UNDEFINED ) Return the named configuration environment value as a tuple of floats. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of floats. UNDEFINED Source code in src/convoke/configs.py 401 402 403 404 405 406 407 def as_float_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ float ]: \"\"\"Return the named configuration environment value as a tuple of floats. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of floats. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ float ]) as_int ( name , default = UNDEFINED ) Return the named configuration environment value as an int. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already an int. UNDEFINED Source code in src/convoke/configs.py 377 378 379 380 381 382 383 def as_int ( self , name : str , default : Union [ int , TUndefined ] = UNDEFINED ) -> int : \"\"\"Return the named configuration environment value as an int. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an int. \"\"\" return self . get ( name , default = default , caster = int ) as_int_tuple ( name , default = UNDEFINED ) Return the named configuration environment value as a tuple of ints. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of ints. UNDEFINED Source code in src/convoke/configs.py 385 386 387 388 389 390 391 def as_int_tuple ( self , name : str , default : Union [ tuple [ int ], TUndefined ] = UNDEFINED ) -> tuple [ int ]: \"\"\"Return the named configuration environment value as a tuple of ints. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of ints. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ int ]) as_object_import ( name , default = UNDEFINED ) Return the named configuration environment value as an imported object. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already an object. UNDEFINED Source code in src/convoke/configs.py 443 444 445 446 447 448 449 450 def as_object_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported object. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an object. \"\"\" path = self . get ( name , default = default ) return import_object ( path ) as_object_import_tuple ( name , default = UNDEFINED ) Return the named configuration environment value as a tuple of imported objects. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of objects. UNDEFINED Source code in src/convoke/configs.py 452 453 454 455 456 457 458 459 def as_object_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ): \"\"\"Return the named configuration environment value as a tuple of imported objects. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of objects. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( import_object ( path ) for path in paths ) as_package_import ( name , default = UNDEFINED ) Return the named configuration environment value as an imported module. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a module. UNDEFINED Source code in src/convoke/configs.py 425 426 427 428 429 430 431 432 def as_package_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported module. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a module. \"\"\" path = self . get ( name , default = default ) return importlib . import_module ( path ) as_package_import_tuple ( name , default = UNDEFINED ) Return the named configuration environment value as a tuple of imported modules. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of modules. UNDEFINED Source code in src/convoke/configs.py 434 435 436 437 438 439 440 441 def as_package_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a tuple of imported modules. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of modules. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( importlib . import_module ( path ) for path in paths ) as_path ( name , default = UNDEFINED ) Return the named configuration environment value as a Path. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a Path. UNDEFINED Source code in src/convoke/configs.py 409 410 411 412 413 414 415 def as_path ( self , name : str , default : Union [ Path , TUndefined ] = UNDEFINED ) -> Path : \"\"\"Return the named configuration environment value as a Path. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Path. \"\"\" return self . get ( name , default = default , caster = Path ) as_path_tuple ( name , default = UNDEFINED ) Return the named configuration environment value as a tuple of Paths. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of Paths. UNDEFINED Source code in src/convoke/configs.py 417 418 419 420 421 422 423 def as_path_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ Path ]: \"\"\"Return the named configuration environment value as a tuple of Paths. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Paths. \"\"\" return self . get ( name , default = default , caster = tuple [ Path ]) as_secret ( name , default = UNDEFINED ) Return the named configuration environment value as a Secret string. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a Secret. UNDEFINED Source code in src/convoke/configs.py 345 346 347 348 349 350 351 def as_secret ( self , name : str , default : Secret = UNDEFINED ) -> Secret : \"\"\"Return the named configuration environment value as a Secret string. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Secret. \"\"\" return self . get ( name , default = default , caster = Secret ) as_secret_tuple ( name , default = UNDEFINED ) Return the named configuration environment value as a sequence of Secret strings. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of Secrets. UNDEFINED Source code in src/convoke/configs.py 353 354 355 356 357 358 359 def as_secret_tuple ( self , name : str , default : Union [ tuple [ Secret ], TUndefined ] = UNDEFINED ) -> tuple [ Secret ]: \"\"\"Return the named configuration environment value as a sequence of Secret strings. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Secrets. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ Secret ]) asdict ( keys = ()) Return a dictionary with the defined settings Source code in src/convoke/configs.py 327 328 329 330 331 332 def asdict ( self , keys = ()) -> dict : \"\"\"Return a dictionary with the defined settings\"\"\" if keys : return fn . project ( dc . asdict ( self ), keys ) else : return dc . asdict ( self ) from_config ( config ) classmethod Derive an instance of this config class from another configuration. This is really only useful if the passed configuration has overridden (non-environment-derived) values. Source code in src/convoke/configs.py 254 255 256 257 258 259 260 261 262 263 264 @classmethod def from_config ( cls : Type [ T ], config : \"BaseConfig\" ) -> T : \"\"\"Derive an instance of this config class from another configuration. This is really only useful if the passed configuration has overridden (non-environment-derived) values. \"\"\" valid_params = set ( inspect . signature ( cls ) . parameters ) kwargs = { k : v for k , v in dc . asdict ( config ) . items () if k in valid_params } return cls ( ** kwargs ) gather_settings () classmethod Gather settings from all loaded configurations. Source code in src/convoke/configs.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 @classmethod def gather_settings ( cls ) -> dict : \"\"\"Gather settings from all loaded configurations.\"\"\" base = BaseConfig . report_settings () base_settings = set ( base [ \"settings\" ] . keys ()) all_settings = { f \" { BaseConfig . __module__ } . { BaseConfig . __name__ } \" : base } for config in cls . plugins_by_name . values (): settings = config . report_settings () all_settings [ f \" { config . __module__ } . { config . __name__ } \" ] = { \"doc\" : settings [ \"doc\" ], \"settings\" : omit ( settings [ \"settings\" ], base_settings ), } return all_settings get ( name , default = UNDEFINED , caster = UNDEFINED ) Return the named configuration environment value, optionally casting it as specified. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already the expected type. UNDEFINED caster Type A type to cast the string value to, if any. UNDEFINED Source code in src/convoke/configs.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def get ( self , name : str , default : Any = UNDEFINED , caster : Union [ Type , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value, optionally casting it as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the string value to, if any. \"\"\" if caster is UNDEFINED : caster = identity else : caster = get_casting_type ( name , caster ) try : value = self [ name ] except KeyError : if default is UNDEFINED : raise else : value = default return caster ( value ) get_tuple ( name , default = UNDEFINED , caster = tuple [ str ]) Return the named configuration environment value as a sequence, optionally casting internal values as specified. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already the expected type. UNDEFINED caster Type A type to cast the internal string values to, if any. tuple [ str ] Source code in src/convoke/configs.py 334 335 336 337 338 339 340 341 342 343 def get_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED , caster : Type = tuple [ str ] ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a sequence, optionally casting internal values as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the internal string values to, if any. \"\"\" return self . get ( name , default = default , caster = caster ) report_settings () classmethod Prepare a datastructure reporting on this configuration class's settings. Source code in src/convoke/configs.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 @classmethod def report_settings ( cls ) -> dict : \"\"\"Prepare a datastructure reporting on this configuration class's settings.\"\"\" return { \"doc\" : format_object_docstring ( cls ), \"settings\" : { fd . name : { \"type\" : fd . type , \"default\" : ( UNDEFINED if ( default := getattr ( fd , \"__config_default__\" , dc . MISSING )) is dc . MISSING else default ), \"doc\" : getattr ( fd , \"__doc__\" , \"\" ), } for fd in dc . fields ( cls ) }, }","title":"convoke.configs"},{"location":"reference/configs/#convokeconfigs","text":"Tools for parsing configuration values from the environment","title":"convoke.configs"},{"location":"reference/configs/#convokeconfigsenv_field","text":"Define a field that pulls config values from the environment. Fields with missing defaults will be assumed to be required, and if missing will produce an error. Parameters: Name Type Description Default default Any the default value to use, if any, of the expected type. If this is omitted, the field will be required. MISSING doc str a docstring describing the use of the configuration value, used in generating .env files '' Source code in src/convoke/configs.py 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def env_field ( * , default = dc . MISSING , init = True , repr = True , hash = None , compare = True , metadata = None , kw_only = dc . MISSING , doc = \"\" , ): \"\"\"Define a field that pulls config values from the environment. Fields with missing defaults will be assumed to be required, and if missing will produce an error. :param Any default: the default value to use, if any, of the expected type. If this is omitted, the field will be required. :param str doc: a docstring describing the use of the configuration value, used in generating .env files \"\"\" return ConfigField ( default , init , repr , hash , compare , metadata , kw_only , doc )","title":"convoke.configs.env_field"},{"location":"reference/configs/#convokeconfigssecret","text":"Bases: str A string value that should not be revealed in logs, tracebacks, etc. Source code in src/convoke/configs.py 25 26 27 28 29 30 class Secret ( str ): \"\"\"A string value that should not be revealed in logs, tracebacks, etc.\"\"\" def __repr__ ( self ) -> str : class_name = self . __class__ . __name__ return f \" { class_name } ('**********')\"","title":"convoke.configs.Secret"},{"location":"reference/configs/#convokeconfigsbaseconfig","text":"Base settings common to all configurations Source code in src/convoke/configs.pyclass BaseConfig ( metaclass = BaseConfigMeta ): \"\"\"Base settings common to all configurations\"\"\" DEBUG : bool = env_field ( default = False , doc = \"Development mode?\" ) TESTING : bool = env_field ( default = False , doc = \"Testing mode?\" ) env_field = env_field @classmethod def from_config ( cls : Type [ T ], config : \"BaseConfig\" ) -> T : \"\"\"Derive an instance of this config class from another configuration. This is really only useful if the passed configuration has overridden (non-environment-derived) values. \"\"\" valid_params = set ( inspect . signature ( cls ) . parameters ) kwargs = { k : v for k , v in dc . asdict ( config ) . items () if k in valid_params } return cls ( ** kwargs ) @classmethod def gather_settings ( cls ) -> dict : \"\"\"Gather settings from all loaded configurations.\"\"\" base = BaseConfig . report_settings () base_settings = set ( base [ \"settings\" ] . keys ()) all_settings = { f \" { BaseConfig . __module__ } . { BaseConfig . __name__ } \" : base } for config in cls . plugins_by_name . values (): settings = config . report_settings () all_settings [ f \" { config . __module__ } . { config . __name__ } \" ] = { \"doc\" : settings [ \"doc\" ], \"settings\" : omit ( settings [ \"settings\" ], base_settings ), } return all_settings @classmethod def report_settings ( cls ) -> dict : \"\"\"Prepare a datastructure reporting on this configuration class's settings.\"\"\" return { \"doc\" : format_object_docstring ( cls ), \"settings\" : { fd . name : { \"type\" : fd . type , \"default\" : ( UNDEFINED if ( default := getattr ( fd , \"__config_default__\" , dc . MISSING )) is dc . MISSING else default ), \"doc\" : getattr ( fd , \"__doc__\" , \"\" ), } for fd in dc . fields ( cls ) }, } def __getitem__ ( self , name : str ) -> str : if hasattr ( self , name ): return getattr ( self , name ) return os . environ [ name ] def get ( self , name : str , default : Any = UNDEFINED , caster : Union [ Type , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value, optionally casting it as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the string value to, if any. \"\"\" if caster is UNDEFINED : caster = identity else : caster = get_casting_type ( name , caster ) try : value = self [ name ] except KeyError : if default is UNDEFINED : raise else : value = default return caster ( value ) def asdict ( self , keys = ()) -> dict : \"\"\"Return a dictionary with the defined settings\"\"\" if keys : return fn . project ( dc . asdict ( self ), keys ) else : return dc . asdict ( self ) def get_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED , caster : Type = tuple [ str ] ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a sequence, optionally casting internal values as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the internal string values to, if any. \"\"\" return self . get ( name , default = default , caster = caster ) def as_secret ( self , name : str , default : Secret = UNDEFINED ) -> Secret : \"\"\"Return the named configuration environment value as a Secret string. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Secret. \"\"\" return self . get ( name , default = default , caster = Secret ) def as_secret_tuple ( self , name : str , default : Union [ tuple [ Secret ], TUndefined ] = UNDEFINED ) -> tuple [ Secret ]: \"\"\"Return the named configuration environment value as a sequence of Secret strings. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Secrets. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ Secret ]) def as_bool ( self , name : str , default : Union [ bool , TUndefined ] = UNDEFINED ) -> bool : \"\"\"Return the named configuration environment value as a boolean value. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a boolean. \"\"\" return self . get ( name , default = default , caster = bool ) def as_bool_tuple ( self , name : str , default : Union [ tuple [ bool ], TUndefined ] = UNDEFINED ) -> tuple [ bool ]: \"\"\"Return the named configuration environment value as a tuple of boolean values. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of booleans. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ bool ]) def as_int ( self , name : str , default : Union [ int , TUndefined ] = UNDEFINED ) -> int : \"\"\"Return the named configuration environment value as an int. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an int. \"\"\" return self . get ( name , default = default , caster = int ) def as_int_tuple ( self , name : str , default : Union [ tuple [ int ], TUndefined ] = UNDEFINED ) -> tuple [ int ]: \"\"\"Return the named configuration environment value as a tuple of ints. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of ints. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ int ]) def as_float ( self , name : str , default : Union [ float , TUndefined ] = UNDEFINED ) -> float : \"\"\"Return the named configuration environment value as a float. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a float. \"\"\" return self . get ( name , default = default , caster = float ) def as_float_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ float ]: \"\"\"Return the named configuration environment value as a tuple of floats. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of floats. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ float ]) def as_path ( self , name : str , default : Union [ Path , TUndefined ] = UNDEFINED ) -> Path : \"\"\"Return the named configuration environment value as a Path. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Path. \"\"\" return self . get ( name , default = default , caster = Path ) def as_path_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ Path ]: \"\"\"Return the named configuration environment value as a tuple of Paths. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Paths. \"\"\" return self . get ( name , default = default , caster = tuple [ Path ]) def as_package_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported module. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a module. \"\"\" path = self . get ( name , default = default ) return importlib . import_module ( path ) def as_package_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a tuple of imported modules. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of modules. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( importlib . import_module ( path ) for path in paths ) def as_object_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported object. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an object. \"\"\" path = self . get ( name , default = default ) return import_object ( path ) def as_object_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ): \"\"\"Return the named configuration environment value as a tuple of imported objects. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of objects. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( import_object ( path ) for path in paths )","title":"convoke.configs.BaseConfig"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_bool","text":"Return the named configuration environment value as a boolean value. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a boolean. UNDEFINED Source code in src/convoke/configs.py 361 362 363 364 365 366 367 def as_bool ( self , name : str , default : Union [ bool , TUndefined ] = UNDEFINED ) -> bool : \"\"\"Return the named configuration environment value as a boolean value. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a boolean. \"\"\" return self . get ( name , default = default , caster = bool )","title":"as_bool"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_bool_tuple","text":"Return the named configuration environment value as a tuple of boolean values. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of booleans. UNDEFINED Source code in src/convoke/configs.py 369 370 371 372 373 374 375 def as_bool_tuple ( self , name : str , default : Union [ tuple [ bool ], TUndefined ] = UNDEFINED ) -> tuple [ bool ]: \"\"\"Return the named configuration environment value as a tuple of boolean values. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of booleans. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ bool ])","title":"as_bool_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_float","text":"Return the named configuration environment value as a float. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a float. UNDEFINED Source code in src/convoke/configs.py 393 394 395 396 397 398 399 def as_float ( self , name : str , default : Union [ float , TUndefined ] = UNDEFINED ) -> float : \"\"\"Return the named configuration environment value as a float. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a float. \"\"\" return self . get ( name , default = default , caster = float )","title":"as_float"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_float_tuple","text":"Return the named configuration environment value as a tuple of floats. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of floats. UNDEFINED Source code in src/convoke/configs.py 401 402 403 404 405 406 407 def as_float_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ float ]: \"\"\"Return the named configuration environment value as a tuple of floats. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of floats. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ float ])","title":"as_float_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_int","text":"Return the named configuration environment value as an int. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already an int. UNDEFINED Source code in src/convoke/configs.py 377 378 379 380 381 382 383 def as_int ( self , name : str , default : Union [ int , TUndefined ] = UNDEFINED ) -> int : \"\"\"Return the named configuration environment value as an int. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an int. \"\"\" return self . get ( name , default = default , caster = int )","title":"as_int"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_int_tuple","text":"Return the named configuration environment value as a tuple of ints. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of ints. UNDEFINED Source code in src/convoke/configs.py 385 386 387 388 389 390 391 def as_int_tuple ( self , name : str , default : Union [ tuple [ int ], TUndefined ] = UNDEFINED ) -> tuple [ int ]: \"\"\"Return the named configuration environment value as a tuple of ints. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of ints. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ int ])","title":"as_int_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_object_import","text":"Return the named configuration environment value as an imported object. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already an object. UNDEFINED Source code in src/convoke/configs.py 443 444 445 446 447 448 449 450 def as_object_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported object. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already an object. \"\"\" path = self . get ( name , default = default ) return import_object ( path )","title":"as_object_import"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_object_import_tuple","text":"Return the named configuration environment value as a tuple of imported objects. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of objects. UNDEFINED Source code in src/convoke/configs.py 452 453 454 455 456 457 458 459 def as_object_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ): \"\"\"Return the named configuration environment value as a tuple of imported objects. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of objects. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( import_object ( path ) for path in paths )","title":"as_object_import_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_package_import","text":"Return the named configuration environment value as an imported module. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a module. UNDEFINED Source code in src/convoke/configs.py 425 426 427 428 429 430 431 432 def as_package_import ( self , name : str , default : Union [ Any , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value as an imported module. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a module. \"\"\" path = self . get ( name , default = default ) return importlib . import_module ( path )","title":"as_package_import"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_package_import_tuple","text":"Return the named configuration environment value as a tuple of imported modules. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of modules. UNDEFINED Source code in src/convoke/configs.py 434 435 436 437 438 439 440 441 def as_package_import_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a tuple of imported modules. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of modules. \"\"\" paths = self . get_tuple ( name , default = default ) return tuple ( importlib . import_module ( path ) for path in paths )","title":"as_package_import_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_path","text":"Return the named configuration environment value as a Path. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a Path. UNDEFINED Source code in src/convoke/configs.py 409 410 411 412 413 414 415 def as_path ( self , name : str , default : Union [ Path , TUndefined ] = UNDEFINED ) -> Path : \"\"\"Return the named configuration environment value as a Path. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Path. \"\"\" return self . get ( name , default = default , caster = Path )","title":"as_path"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_path_tuple","text":"Return the named configuration environment value as a tuple of Paths. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of Paths. UNDEFINED Source code in src/convoke/configs.py 417 418 419 420 421 422 423 def as_path_tuple ( self , name : str , default : Union [ tuple [ float ], TUndefined ] = UNDEFINED ) -> tuple [ Path ]: \"\"\"Return the named configuration environment value as a tuple of Paths. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Paths. \"\"\" return self . get ( name , default = default , caster = tuple [ Path ])","title":"as_path_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_secret","text":"Return the named configuration environment value as a Secret string. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a Secret. UNDEFINED Source code in src/convoke/configs.py 345 346 347 348 349 350 351 def as_secret ( self , name : str , default : Secret = UNDEFINED ) -> Secret : \"\"\"Return the named configuration environment value as a Secret string. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a Secret. \"\"\" return self . get ( name , default = default , caster = Secret )","title":"as_secret"},{"location":"reference/configs/#convoke.configs.BaseConfig.as_secret_tuple","text":"Return the named configuration environment value as a sequence of Secret strings. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already a tuple of Secrets. UNDEFINED Source code in src/convoke/configs.py 353 354 355 356 357 358 359 def as_secret_tuple ( self , name : str , default : Union [ tuple [ Secret ], TUndefined ] = UNDEFINED ) -> tuple [ Secret ]: \"\"\"Return the named configuration environment value as a sequence of Secret strings. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already a tuple of Secrets. \"\"\" return self . get_tuple ( name , default = default , caster = tuple [ Secret ])","title":"as_secret_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.asdict","text":"Return a dictionary with the defined settings Source code in src/convoke/configs.py 327 328 329 330 331 332 def asdict ( self , keys = ()) -> dict : \"\"\"Return a dictionary with the defined settings\"\"\" if keys : return fn . project ( dc . asdict ( self ), keys ) else : return dc . asdict ( self )","title":"asdict"},{"location":"reference/configs/#convoke.configs.BaseConfig.from_config","text":"Derive an instance of this config class from another configuration. This is really only useful if the passed configuration has overridden (non-environment-derived) values. Source code in src/convoke/configs.py 254 255 256 257 258 259 260 261 262 263 264 @classmethod def from_config ( cls : Type [ T ], config : \"BaseConfig\" ) -> T : \"\"\"Derive an instance of this config class from another configuration. This is really only useful if the passed configuration has overridden (non-environment-derived) values. \"\"\" valid_params = set ( inspect . signature ( cls ) . parameters ) kwargs = { k : v for k , v in dc . asdict ( config ) . items () if k in valid_params } return cls ( ** kwargs )","title":"from_config"},{"location":"reference/configs/#convoke.configs.BaseConfig.gather_settings","text":"Gather settings from all loaded configurations. Source code in src/convoke/configs.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 @classmethod def gather_settings ( cls ) -> dict : \"\"\"Gather settings from all loaded configurations.\"\"\" base = BaseConfig . report_settings () base_settings = set ( base [ \"settings\" ] . keys ()) all_settings = { f \" { BaseConfig . __module__ } . { BaseConfig . __name__ } \" : base } for config in cls . plugins_by_name . values (): settings = config . report_settings () all_settings [ f \" { config . __module__ } . { config . __name__ } \" ] = { \"doc\" : settings [ \"doc\" ], \"settings\" : omit ( settings [ \"settings\" ], base_settings ), } return all_settings","title":"gather_settings"},{"location":"reference/configs/#convoke.configs.BaseConfig.get","text":"Return the named configuration environment value, optionally casting it as specified. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already the expected type. UNDEFINED caster Type A type to cast the string value to, if any. UNDEFINED Source code in src/convoke/configs.py 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def get ( self , name : str , default : Any = UNDEFINED , caster : Union [ Type , TUndefined ] = UNDEFINED ) -> Any : \"\"\"Return the named configuration environment value, optionally casting it as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the string value to, if any. \"\"\" if caster is UNDEFINED : caster = identity else : caster = get_casting_type ( name , caster ) try : value = self [ name ] except KeyError : if default is UNDEFINED : raise else : value = default return caster ( value )","title":"get"},{"location":"reference/configs/#convoke.configs.BaseConfig.get_tuple","text":"Return the named configuration environment value as a sequence, optionally casting internal values as specified. Parameters: Name Type Description Default name str The name of the configuration value, as defined on this object or in the environment. required default Any A default value, already the expected type. UNDEFINED caster Type A type to cast the internal string values to, if any. tuple [ str ] Source code in src/convoke/configs.py 334 335 336 337 338 339 340 341 342 343 def get_tuple ( self , name : str , default : Union [ tuple [ Any ], TUndefined ] = UNDEFINED , caster : Type = tuple [ str ] ) -> tuple [ Any ]: \"\"\"Return the named configuration environment value as a sequence, optionally casting internal values as specified. :param str name: The name of the configuration value, as defined on this object or in the environment. :param Any default: A default value, already the expected type. :param Type caster: A type to cast the internal string values to, if any. \"\"\" return self . get ( name , default = default , caster = caster )","title":"get_tuple"},{"location":"reference/configs/#convoke.configs.BaseConfig.report_settings","text":"Prepare a datastructure reporting on this configuration class's settings. Source code in src/convoke/configs.py 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 @classmethod def report_settings ( cls ) -> dict : \"\"\"Prepare a datastructure reporting on this configuration class's settings.\"\"\" return { \"doc\" : format_object_docstring ( cls ), \"settings\" : { fd . name : { \"type\" : fd . type , \"default\" : ( UNDEFINED if ( default := getattr ( fd , \"__config_default__\" , dc . MISSING )) is dc . MISSING else default ), \"doc\" : getattr ( fd , \"__doc__\" , \"\" ), } for fd in dc . fields ( cls ) }, }","title":"report_settings"},{"location":"reference/mountpoints/","text":"convoke.mountpoints Tools for registering Base plugins convoke.mountpoints.Mountpoint A Mountpoint, subclassed, provides a place to register objects for a particular use. This registration collaborates with Base . Source code in src/convoke/mountpoints.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @dataclass class Mountpoint : \"\"\"A Mountpoint, subclassed, provides a place to register objects for a particular use. This registration collaborates with [`Base`][convoke.bases.Base]. \"\"\" mounted : list = field ( default_factory = list ) _mountpoints : ClassVar [ list [ Type [ Mountpoint ]]] = [] def __init_subclass__ ( cls ): cls . _mountpoints . append ( cls ) cls . registry = [] @classmethod def register ( cls , func ): \"\"\"Register the given function for use with the mountpoint. This registration collaborates with [`Base`][convoke.bases.Base]. \"\"\" mp = getattr ( func , \"__mountpoints__\" , []) mp . append ( cls ) func . __mountpoints__ = mp return func def mount ( self , func ): \"\"\"Mount a registered function on this instance.\"\"\" self . mounted . append ( func ) mount ( func ) Mount a registered function on this instance. Source code in src/convoke/mountpoints.py 34 35 36 def mount ( self , func ): \"\"\"Mount a registered function on this instance.\"\"\" self . mounted . append ( func ) register ( func ) classmethod Register the given function for use with the mountpoint. This registration collaborates with Base . Source code in src/convoke/mountpoints.py 23 24 25 26 27 28 29 30 31 32 @classmethod def register ( cls , func ): \"\"\"Register the given function for use with the mountpoint. This registration collaborates with [`Base`][convoke.bases.Base]. \"\"\" mp = getattr ( func , \"__mountpoints__\" , []) mp . append ( cls ) func . __mountpoints__ = mp return func","title":"convoke.mountpoints"},{"location":"reference/mountpoints/#convokemountpoints","text":"Tools for registering Base plugins","title":"convoke.mountpoints"},{"location":"reference/mountpoints/#convokemountpointsmountpoint","text":"A Mountpoint, subclassed, provides a place to register objects for a particular use. This registration collaborates with Base . Source code in src/convoke/mountpoints.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @dataclass class Mountpoint : \"\"\"A Mountpoint, subclassed, provides a place to register objects for a particular use. This registration collaborates with [`Base`][convoke.bases.Base]. \"\"\" mounted : list = field ( default_factory = list ) _mountpoints : ClassVar [ list [ Type [ Mountpoint ]]] = [] def __init_subclass__ ( cls ): cls . _mountpoints . append ( cls ) cls . registry = [] @classmethod def register ( cls , func ): \"\"\"Register the given function for use with the mountpoint. This registration collaborates with [`Base`][convoke.bases.Base]. \"\"\" mp = getattr ( func , \"__mountpoints__\" , []) mp . append ( cls ) func . __mountpoints__ = mp return func def mount ( self , func ): \"\"\"Mount a registered function on this instance.\"\"\" self . mounted . append ( func )","title":"convoke.mountpoints.Mountpoint"},{"location":"reference/mountpoints/#convoke.mountpoints.Mountpoint.mount","text":"Mount a registered function on this instance. Source code in src/convoke/mountpoints.py 34 35 36 def mount ( self , func ): \"\"\"Mount a registered function on this instance.\"\"\" self . mounted . append ( func )","title":"mount"},{"location":"reference/mountpoints/#convoke.mountpoints.Mountpoint.register","text":"Register the given function for use with the mountpoint. This registration collaborates with Base . Source code in src/convoke/mountpoints.py 23 24 25 26 27 28 29 30 31 32 @classmethod def register ( cls , func ): \"\"\"Register the given function for use with the mountpoint. This registration collaborates with [`Base`][convoke.bases.Base]. \"\"\" mp = getattr ( func , \"__mountpoints__\" , []) mp . append ( cls ) func . __mountpoints__ = mp return func","title":"register"},{"location":"reference/signals/","text":"convoke.signals Utilities for managing async signals and signal handlers convoke.signals.Signal A Signal provides a typed interface for sending messages through the current HQ. To define a signal, subclass and provide a member class Message , which defines the keyword arguments that may be sent through the signal. Source code in src/convoke/signals.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class Signal : \"\"\"A Signal provides a typed interface for sending messages through the current HQ. To define a signal, subclass and provide a member class [`Message`][convoke.signals.Signal.Message], which defines the keyword arguments that may be sent through the signal. \"\"\" @dataclass class Message : \"\"\"The default message type for signals. Define your own Message dataclass on each Signal for type-safe signals. :param str value: a simple string to send as part of the message \"\"\" value : str @classmethod def connect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Connect a callable to this signal. :param Receiver receiver: a callable that accepts a single argument of type `Signal.Message` :param HQ using: the [`HQ`][convoke.bases.HQ] instance to connect on (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . connect_signal_receiver ( cls , receiver ) @classmethod def disconnect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Disconnect a previously-connected callable. :param Receiver receiver: a Receiver previously connected via this HQ :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . disconnect_signal_receiver ( cls , receiver ) @classmethod async def send ( cls , * , using : HQ | None = None , ** kwargs ): \"\"\"Send a message over this Signal. Messages are sent asynchronously. Do not depend on side effects to happen immediately. :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) :param **kwargs: the keyword arguments to construct the `Signal.Message` with. \"\"\" msg = cls . Message ( ** kwargs ) if using is None : using = current_hq . get () await using . send_signal ( cls , msg ) Message dataclass The default message type for signals. Define your own Message dataclass on each Signal for type-safe signals. Parameters: Name Type Description Default value str a simple string to send as part of the message required Source code in src/convoke/signals.py 23 24 25 26 27 28 29 30 31 32 @dataclass class Message : \"\"\"The default message type for signals. Define your own Message dataclass on each Signal for type-safe signals. :param str value: a simple string to send as part of the message \"\"\" value : str connect ( receiver , using = None ) classmethod Connect a callable to this signal. Parameters: Name Type Description Default receiver Receiver a callable that accepts a single argument of type Signal.Message required using HQ the HQ instance to connect on (defaults to HQ.current_hq ) None Source code in src/convoke/signals.py 34 35 36 37 38 39 40 41 42 43 @classmethod def connect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Connect a callable to this signal. :param Receiver receiver: a callable that accepts a single argument of type `Signal.Message` :param HQ using: the [`HQ`][convoke.bases.HQ] instance to connect on (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . connect_signal_receiver ( cls , receiver ) disconnect ( receiver , using = None ) classmethod Disconnect a previously-connected callable. Parameters: Name Type Description Default receiver Receiver a Receiver previously connected via this HQ required using HQ the HQ instance to send to (defaults to HQ.current_hq ) None Source code in src/convoke/signals.py 45 46 47 48 49 50 51 52 53 54 @classmethod def disconnect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Disconnect a previously-connected callable. :param Receiver receiver: a Receiver previously connected via this HQ :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . disconnect_signal_receiver ( cls , receiver ) send ( * , using = None , ** kwargs ) async classmethod Send a message over this Signal. Messages are sent asynchronously. Do not depend on side effects to happen immediately. Parameters: Name Type Description Default using HQ the HQ instance to send to (defaults to HQ.current_hq ) None **kwargs the keyword arguments to construct the Signal.Message with. {} Source code in src/convoke/signals.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @classmethod async def send ( cls , * , using : HQ | None = None , ** kwargs ): \"\"\"Send a message over this Signal. Messages are sent asynchronously. Do not depend on side effects to happen immediately. :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) :param **kwargs: the keyword arguments to construct the `Signal.Message` with. \"\"\" msg = cls . Message ( ** kwargs ) if using is None : using = current_hq . get () await using . send_signal ( cls , msg )","title":"convoke.signals"},{"location":"reference/signals/#convokesignals","text":"Utilities for managing async signals and signal handlers","title":"convoke.signals"},{"location":"reference/signals/#convokesignalssignal","text":"A Signal provides a typed interface for sending messages through the current HQ. To define a signal, subclass and provide a member class Message , which defines the keyword arguments that may be sent through the signal. Source code in src/convoke/signals.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class Signal : \"\"\"A Signal provides a typed interface for sending messages through the current HQ. To define a signal, subclass and provide a member class [`Message`][convoke.signals.Signal.Message], which defines the keyword arguments that may be sent through the signal. \"\"\" @dataclass class Message : \"\"\"The default message type for signals. Define your own Message dataclass on each Signal for type-safe signals. :param str value: a simple string to send as part of the message \"\"\" value : str @classmethod def connect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Connect a callable to this signal. :param Receiver receiver: a callable that accepts a single argument of type `Signal.Message` :param HQ using: the [`HQ`][convoke.bases.HQ] instance to connect on (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . connect_signal_receiver ( cls , receiver ) @classmethod def disconnect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Disconnect a previously-connected callable. :param Receiver receiver: a Receiver previously connected via this HQ :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . disconnect_signal_receiver ( cls , receiver ) @classmethod async def send ( cls , * , using : HQ | None = None , ** kwargs ): \"\"\"Send a message over this Signal. Messages are sent asynchronously. Do not depend on side effects to happen immediately. :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) :param **kwargs: the keyword arguments to construct the `Signal.Message` with. \"\"\" msg = cls . Message ( ** kwargs ) if using is None : using = current_hq . get () await using . send_signal ( cls , msg )","title":"convoke.signals.Signal"},{"location":"reference/signals/#convoke.signals.Signal.Message","text":"The default message type for signals. Define your own Message dataclass on each Signal for type-safe signals. Parameters: Name Type Description Default value str a simple string to send as part of the message required Source code in src/convoke/signals.py 23 24 25 26 27 28 29 30 31 32 @dataclass class Message : \"\"\"The default message type for signals. Define your own Message dataclass on each Signal for type-safe signals. :param str value: a simple string to send as part of the message \"\"\" value : str","title":"Message"},{"location":"reference/signals/#convoke.signals.Signal.connect","text":"Connect a callable to this signal. Parameters: Name Type Description Default receiver Receiver a callable that accepts a single argument of type Signal.Message required using HQ the HQ instance to connect on (defaults to HQ.current_hq ) None Source code in src/convoke/signals.py 34 35 36 37 38 39 40 41 42 43 @classmethod def connect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Connect a callable to this signal. :param Receiver receiver: a callable that accepts a single argument of type `Signal.Message` :param HQ using: the [`HQ`][convoke.bases.HQ] instance to connect on (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . connect_signal_receiver ( cls , receiver )","title":"connect"},{"location":"reference/signals/#convoke.signals.Signal.disconnect","text":"Disconnect a previously-connected callable. Parameters: Name Type Description Default receiver Receiver a Receiver previously connected via this HQ required using HQ the HQ instance to send to (defaults to HQ.current_hq ) None Source code in src/convoke/signals.py 45 46 47 48 49 50 51 52 53 54 @classmethod def disconnect ( cls , receiver : Receiver , using : HQ | None = None ): \"\"\"Disconnect a previously-connected callable. :param Receiver receiver: a Receiver previously connected via this HQ :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) \"\"\" if using is None : using = current_hq . get () using . disconnect_signal_receiver ( cls , receiver )","title":"disconnect"},{"location":"reference/signals/#convoke.signals.Signal.send","text":"Send a message over this Signal. Messages are sent asynchronously. Do not depend on side effects to happen immediately. Parameters: Name Type Description Default using HQ the HQ instance to send to (defaults to HQ.current_hq ) None **kwargs the keyword arguments to construct the Signal.Message with. {} Source code in src/convoke/signals.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @classmethod async def send ( cls , * , using : HQ | None = None , ** kwargs ): \"\"\"Send a message over this Signal. Messages are sent asynchronously. Do not depend on side effects to happen immediately. :param HQ using: the [`HQ`][convoke.bases.HQ] instance to send to (defaults to `HQ.current_hq`) :param **kwargs: the keyword arguments to construct the `Signal.Message` with. \"\"\" msg = cls . Message ( ** kwargs ) if using is None : using = current_hq . get () await using . send_signal ( cls , msg )","title":"send"},{"location":"tutorials/","text":"Tutorials Configuring your application with Convoke","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"Configuring your application with Convoke","title":"Tutorials"},{"location":"tutorials/configuring/","text":"Tutorial: Configuring Your Application In this tutorial, we'll see how to use convoke to configure a simple Starlette web application. We'll start with a very simple Starlette web app: # app.py from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route templates = Jinja2Templates(directory='templates') async def homepage(request): return templates.TemplateResponse( \"index.html\", {\"request\": request, \"DEBUG\": request.app.debug} ) def create_app(): return Starlette(debug=True, routes=[ Route('/', homepage), ]) Built-in configuration settings Now, of course, we don't want to always be in debug mode. Let's add a configuration by subclassing convoke.configs.BaseConfig : # app.py from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from convoke.configs import BaseConfig, env_field # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" def create_app(): config = WebAppConfig() return Starlette(debug=config.DEBUG, routes=[ Route('/', homepage), ]) Every instance of BaseConfig has two built-in settings: DEBUG and TESTING , both booleans with a default value of False . So, if we run our application, it will default to production mode: $ uvicorn --factory app.create_app But if we set the environment variable DEBUG=True , it will run in development mode: $ DEBUG=True uvicorn --factory app.create_app DEBUG=true and DEBUG=TRUE would also work, but tRuE would not. Likewise, with equivalent cases of DEBUG=False . Custom configuration settings Now, to improve our application, we'll want our users to be able to login, and for that, we'll need sessions: # app.py from starlette.applications import Starlette from starlette.middleware import Middleware from starlette.middleware.sessions import SessionMiddleware # ... def create_app(): config = WebAppConfig() return Starlette( debug=config.DEBUG, routes=[ Route('/', homepage), ], middleware=[ Middleware( SessionMiddleware, secret_key=\"supers3kr1t\", https_only=not config.DEBUG) ], ) We see how the configuration is already making our lives easier: in production we want secure sessions, which requires HTTPS, but in development we don't want to bother with HTTPS, so we use https_only=not config.DEBUG to only require HTTPS in production. Protecting secrets However, we have another problem: our secret key is stored in plain text in our Python source. Anyone who can read this file can discover our secret and hack our users! What to do? Let's move our secret key to the environment: # app.py # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: str = env_field() def create_app(): config = WebAppConfig() return Starlette( # ... middleware=[ Middleware( SessionMiddleware, secret_key=config.SECRET_KEY, https_only=not config.DEBUG) ], ) We use all caps SECRET_KEY by convention, and the corresponding environment variable: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" uvicorn --factory app.create_app Now, one problem is that if we ever print our configuration to the console, we get our secret in plain text again: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" python >>> from app import WebAppConfig >>> print(WebAppConfig()) WebAppConfig(DEBUG=True, TESTING=False, SECRET_KEY='supers3kr1t') Let's fix that by using the Secret type: # app.py # ... from convoke.configs import BaseConfig, env_field, Secret # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field() Now, when we print to the console, our secret is safe: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" python >>> from app import WebAppConfig >>> print(WebAppConfig()) WebAppConfig(DEBUG=True, TESTING=False, SECRET_KEY=Secret('**********')) But when we use the secret as a string, we get the plain-text value: >>> str(WebAppConfig().SECRET_KEY) 'supers3kr1t' Other configuration field types Since we're considering security, let's consider our session age. Starlette's default session age is 2 weeks (1,209,600 seconds), but say that for our application, we require that a user session must be refreshed by authentication every 24 hours (86,400 seconds). As a business policy, this may change in the future, so let's make it a configurable value: # app.py # ... from convoke.configs import BaseConfig, env_field, Secret # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field() SESSION_COOKIE_MAX_AGE: int = env_field(default=86_400) def create_app(): config = WebAppConfig() return Starlette( # ... middleware=[ Middleware( SessionMiddleware, secret_key=config.SECRET_KEY, https_only=not config.DEBUG, max_age=config.SESSION_COOKIE_MAX_AGE, ), ], ) By annotating the type of the configuration field, we tell convoke how to parse the environment string. This works for floats and booleans too: class MyConfig(BaseConfig): VALUE_OF_PI: float = env_field(default=3.14) USE_ANTIGRAVITY: bool = env_field(default=False) Configuration fields with multiple values Now, to really make sure our application is secure, let's configure Starlette's TrustedHostMiddleware : # app.py # ... from starlette.middleware.trustedhost import TrustedHostMiddleware # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field() SESSION_COOKIE_MAX_AGE: int = env_field(default=86_400) ALLOWED_HOSTS: tuple[str] = env_field(default=('127.0.0.1', 'localhost')) def create_app(): config = WebAppConfig() return Starlette( # ... middleware=[ # ... Middleware( TrustedHostMiddleware, allowed_hosts=config.ALLOWED_HOSTS, ), ], ) By using the type annotation tuple[str] , we tell convoke to parse the value as a comma-separated list of strings, resulting in a tuple of strings: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" ALLOWED_HOSTS=\"example.com,*.example.com\" uvicorn --factory app.create_app We could also use tuple[int] for a setting that uses a sequence of integers, etc. Prefer immutability For that matter, we could also use ALLOWED_HOSTS: list[str] give us a list of strings instead of a tuple, but Config instances are immutable, and it's best to use immutable types for configuration values as well. Generating a .env file As we've added more configuration values, our uvicorn invocation has been getting longer and longer. Web applications can have tens if not hundreds of configuration values, and we don't want to type these out every time we start up the dev server! Let's fix that: # app.py # ... from convoke.configs import BaseConfig, env_field, generate_dot_env, Secret # ... if __name__ == \"__main__\": print(generate_dot_env(BaseConfig.gather_settings())) Then, in the shell: $ python app.py > .env $ cat .env ################################ ## convoke.configs.BaseConfig ## ################################ ## ## Base settings common to all configurations # ------------------ # -- DEBUG (bool) -- # ------------------ # # Development mode? DEBUG=\"False\" # -------------------- # -- TESTING (bool) -- # -------------------- # # Testing mode? TESTING=\"False\" ########################### ## __main__.WebAppConfig ## ########################### ## ## Configuration for our web application. # --------------------------------------- # -- SECRET_KEY (Secret) **Required!** -- # --------------------------------------- SECRET_KEY=\"6BIW_mb496YHiptQ1E4WVm-7b_YBW1zQFqZnBKmcsDpTlb1Qb8uZ8w\" # --------------------------- # -- SESSION_COOKIE_MAX_AGE (int) -- # --------------------------- SESSION_COOKIE_MAX_AGE=\"86400\" # --------------------------- # -- ALLOWED_HOSTS (tuple) -- # --------------------------- ALLOWED_HOSTS=\"127.0.0.1,localhost\" A few things to note here: Default values are included Secrets are assigned a securely-generated value Configuration values have documentation! Documenting configuration values Let's add some documentation to our config values: # app.py # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field( doc=\"\"\" Secret used to cryptographically sign session cookies. This should be set to a unique, unpredictable value and kept safe from prying eyes. \"\"\", ) SESSION_COOKIE_MAX_AGE: int = env_field( default=86_400, doc=\"\"\" The maximum age of session cookies, in seconds. Defaults to 24 hours. \"\"\", ) ALLOWED_HOSTS: tuple[str] = env_field( default=('127.0.0.1', 'localhost'), doc=\"\"\" A list of strings representing the host/domain names that this site can serve. \"\"\" ) And now, if we generate a .env file again, we see our new documentation: $ python app.py # ... ########################### ## __main__.WebAppConfig ## ########################### ## ## Configuration for our web application. # --------------------------------------- # -- SECRET_KEY (Secret) **Required!** -- # --------------------------------------- # # Secret used to cryptographically sign session cookies. # # This should be set to a unique, unpredictable value and kept safe from # prying eyes. SECRET_KEY=\"6rlnXtlxeggkgaG1Y4EsEitfRTGjUxu8zbdtZ8GpwfbwCmi0J2Tb3w\" # ---------------------------------- # -- SESSION_COOKIE_MAX_AGE (int) -- # ---------------------------------- # # The maximum age of session cookies, in seconds. # # Defaults to 24 hours. SESSION_COOKIE_MAX_AGE=\"86400\" # --------------------------- # -- ALLOWED_HOSTS (tuple) -- # --------------------------- # # A list of strings representing the host/domain names that this site can serve. ALLOWED_HOSTS=\"127.0.0.1,localhost\" Conclusion With that, you should now understand the basics of configuring a Starlette application with convoke , including how to keep secrets safe, and how to document your settings.","title":"Tutorial: Configuring Your Application"},{"location":"tutorials/configuring/#tutorial-configuring-your-application","text":"In this tutorial, we'll see how to use convoke to configure a simple Starlette web application. We'll start with a very simple Starlette web app: # app.py from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route templates = Jinja2Templates(directory='templates') async def homepage(request): return templates.TemplateResponse( \"index.html\", {\"request\": request, \"DEBUG\": request.app.debug} ) def create_app(): return Starlette(debug=True, routes=[ Route('/', homepage), ])","title":"Tutorial: Configuring Your Application"},{"location":"tutorials/configuring/#built-in-configuration-settings","text":"Now, of course, we don't want to always be in debug mode. Let's add a configuration by subclassing convoke.configs.BaseConfig : # app.py from starlette.applications import Starlette from starlette.responses import JSONResponse from starlette.routing import Route from convoke.configs import BaseConfig, env_field # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" def create_app(): config = WebAppConfig() return Starlette(debug=config.DEBUG, routes=[ Route('/', homepage), ]) Every instance of BaseConfig has two built-in settings: DEBUG and TESTING , both booleans with a default value of False . So, if we run our application, it will default to production mode: $ uvicorn --factory app.create_app But if we set the environment variable DEBUG=True , it will run in development mode: $ DEBUG=True uvicorn --factory app.create_app DEBUG=true and DEBUG=TRUE would also work, but tRuE would not. Likewise, with equivalent cases of DEBUG=False .","title":"Built-in configuration settings"},{"location":"tutorials/configuring/#custom-configuration-settings","text":"Now, to improve our application, we'll want our users to be able to login, and for that, we'll need sessions: # app.py from starlette.applications import Starlette from starlette.middleware import Middleware from starlette.middleware.sessions import SessionMiddleware # ... def create_app(): config = WebAppConfig() return Starlette( debug=config.DEBUG, routes=[ Route('/', homepage), ], middleware=[ Middleware( SessionMiddleware, secret_key=\"supers3kr1t\", https_only=not config.DEBUG) ], ) We see how the configuration is already making our lives easier: in production we want secure sessions, which requires HTTPS, but in development we don't want to bother with HTTPS, so we use https_only=not config.DEBUG to only require HTTPS in production.","title":"Custom configuration settings"},{"location":"tutorials/configuring/#protecting-secrets","text":"However, we have another problem: our secret key is stored in plain text in our Python source. Anyone who can read this file can discover our secret and hack our users! What to do? Let's move our secret key to the environment: # app.py # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: str = env_field() def create_app(): config = WebAppConfig() return Starlette( # ... middleware=[ Middleware( SessionMiddleware, secret_key=config.SECRET_KEY, https_only=not config.DEBUG) ], ) We use all caps SECRET_KEY by convention, and the corresponding environment variable: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" uvicorn --factory app.create_app Now, one problem is that if we ever print our configuration to the console, we get our secret in plain text again: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" python >>> from app import WebAppConfig >>> print(WebAppConfig()) WebAppConfig(DEBUG=True, TESTING=False, SECRET_KEY='supers3kr1t') Let's fix that by using the Secret type: # app.py # ... from convoke.configs import BaseConfig, env_field, Secret # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field() Now, when we print to the console, our secret is safe: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" python >>> from app import WebAppConfig >>> print(WebAppConfig()) WebAppConfig(DEBUG=True, TESTING=False, SECRET_KEY=Secret('**********')) But when we use the secret as a string, we get the plain-text value: >>> str(WebAppConfig().SECRET_KEY) 'supers3kr1t'","title":"Protecting secrets"},{"location":"tutorials/configuring/#other-configuration-field-types","text":"Since we're considering security, let's consider our session age. Starlette's default session age is 2 weeks (1,209,600 seconds), but say that for our application, we require that a user session must be refreshed by authentication every 24 hours (86,400 seconds). As a business policy, this may change in the future, so let's make it a configurable value: # app.py # ... from convoke.configs import BaseConfig, env_field, Secret # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field() SESSION_COOKIE_MAX_AGE: int = env_field(default=86_400) def create_app(): config = WebAppConfig() return Starlette( # ... middleware=[ Middleware( SessionMiddleware, secret_key=config.SECRET_KEY, https_only=not config.DEBUG, max_age=config.SESSION_COOKIE_MAX_AGE, ), ], ) By annotating the type of the configuration field, we tell convoke how to parse the environment string. This works for floats and booleans too: class MyConfig(BaseConfig): VALUE_OF_PI: float = env_field(default=3.14) USE_ANTIGRAVITY: bool = env_field(default=False)","title":"Other configuration field types"},{"location":"tutorials/configuring/#configuration-fields-with-multiple-values","text":"Now, to really make sure our application is secure, let's configure Starlette's TrustedHostMiddleware : # app.py # ... from starlette.middleware.trustedhost import TrustedHostMiddleware # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field() SESSION_COOKIE_MAX_AGE: int = env_field(default=86_400) ALLOWED_HOSTS: tuple[str] = env_field(default=('127.0.0.1', 'localhost')) def create_app(): config = WebAppConfig() return Starlette( # ... middleware=[ # ... Middleware( TrustedHostMiddleware, allowed_hosts=config.ALLOWED_HOSTS, ), ], ) By using the type annotation tuple[str] , we tell convoke to parse the value as a comma-separated list of strings, resulting in a tuple of strings: $ DEBUG=True SECRET_KEY=\"supers3kr1t\" ALLOWED_HOSTS=\"example.com,*.example.com\" uvicorn --factory app.create_app We could also use tuple[int] for a setting that uses a sequence of integers, etc.","title":"Configuration fields with multiple values"},{"location":"tutorials/configuring/#prefer-immutability","text":"For that matter, we could also use ALLOWED_HOSTS: list[str] give us a list of strings instead of a tuple, but Config instances are immutable, and it's best to use immutable types for configuration values as well.","title":"Prefer immutability"},{"location":"tutorials/configuring/#generating-a-env-file","text":"As we've added more configuration values, our uvicorn invocation has been getting longer and longer. Web applications can have tens if not hundreds of configuration values, and we don't want to type these out every time we start up the dev server! Let's fix that: # app.py # ... from convoke.configs import BaseConfig, env_field, generate_dot_env, Secret # ... if __name__ == \"__main__\": print(generate_dot_env(BaseConfig.gather_settings())) Then, in the shell: $ python app.py > .env $ cat .env ################################ ## convoke.configs.BaseConfig ## ################################ ## ## Base settings common to all configurations # ------------------ # -- DEBUG (bool) -- # ------------------ # # Development mode? DEBUG=\"False\" # -------------------- # -- TESTING (bool) -- # -------------------- # # Testing mode? TESTING=\"False\" ########################### ## __main__.WebAppConfig ## ########################### ## ## Configuration for our web application. # --------------------------------------- # -- SECRET_KEY (Secret) **Required!** -- # --------------------------------------- SECRET_KEY=\"6BIW_mb496YHiptQ1E4WVm-7b_YBW1zQFqZnBKmcsDpTlb1Qb8uZ8w\" # --------------------------- # -- SESSION_COOKIE_MAX_AGE (int) -- # --------------------------- SESSION_COOKIE_MAX_AGE=\"86400\" # --------------------------- # -- ALLOWED_HOSTS (tuple) -- # --------------------------- ALLOWED_HOSTS=\"127.0.0.1,localhost\" A few things to note here: Default values are included Secrets are assigned a securely-generated value Configuration values have documentation!","title":"Generating a .env file"},{"location":"tutorials/configuring/#documenting-configuration-values","text":"Let's add some documentation to our config values: # app.py # ... class WebAppConfig(BaseConfig): \"\"\"Configuration for our web application.\"\"\" SECRET_KEY: Secret = env_field( doc=\"\"\" Secret used to cryptographically sign session cookies. This should be set to a unique, unpredictable value and kept safe from prying eyes. \"\"\", ) SESSION_COOKIE_MAX_AGE: int = env_field( default=86_400, doc=\"\"\" The maximum age of session cookies, in seconds. Defaults to 24 hours. \"\"\", ) ALLOWED_HOSTS: tuple[str] = env_field( default=('127.0.0.1', 'localhost'), doc=\"\"\" A list of strings representing the host/domain names that this site can serve. \"\"\" ) And now, if we generate a .env file again, we see our new documentation: $ python app.py # ... ########################### ## __main__.WebAppConfig ## ########################### ## ## Configuration for our web application. # --------------------------------------- # -- SECRET_KEY (Secret) **Required!** -- # --------------------------------------- # # Secret used to cryptographically sign session cookies. # # This should be set to a unique, unpredictable value and kept safe from # prying eyes. SECRET_KEY=\"6rlnXtlxeggkgaG1Y4EsEitfRTGjUxu8zbdtZ8GpwfbwCmi0J2Tb3w\" # ---------------------------------- # -- SESSION_COOKIE_MAX_AGE (int) -- # ---------------------------------- # # The maximum age of session cookies, in seconds. # # Defaults to 24 hours. SESSION_COOKIE_MAX_AGE=\"86400\" # --------------------------- # -- ALLOWED_HOSTS (tuple) -- # --------------------------- # # A list of strings representing the host/domain names that this site can serve. ALLOWED_HOSTS=\"127.0.0.1,localhost\"","title":"Documenting configuration values"},{"location":"tutorials/configuring/#conclusion","text":"With that, you should now understand the basics of configuring a Starlette application with convoke , including how to keep secrets safe, and how to document your settings.","title":"Conclusion"}]}